#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""

import os
import subprocess
import sys


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env_vars = {
        'SUPABASE_URL': os.environ.get('SUPABASE_URL'),
        'SUPABASE_KEY': os.environ.get('SUPABASE_KEY'),
        'YA_ACCESS_KEY': os.environ.get('YA_ACCESS_KEY'),
        'YA_SECRET_KEY': os.environ.get('YA_SECRET_KEY'),
        'BUCKET_NAME': os.environ.get('BUCKET_NAME')
    }
    
    print("üìã –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for var, value in env_vars.items():
        if value:
            print(f"   ‚úÖ {var}: {'*' * min(len(value), 20)}...")
        else:
            print(f"   ‚ùå {var}: –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê")
    
    print("\n" + "="*50)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –≤–≤–µ—Å—Ç–∏
    if not env_vars['SUPABASE_URL'] or not env_vars['SUPABASE_KEY']:
        print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("\nüîó –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ Supabase:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ supabase.com")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí API")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Project URL –∏ anon public –∫–ª—é—á")
        print("\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏:")
        
        supabase_url = input("SUPABASE_URL (https://your-project.supabase.co): ").strip()
        supabase_key = input("SUPABASE_KEY (–¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞): ").strip()
        
        if supabase_url and supabase_key:
            os.environ['SUPABASE_URL'] = supabase_url
            os.environ['SUPABASE_KEY'] = supabase_key
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        else:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –≤–≤–µ–¥–µ–Ω—ã")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Yandex S3
    if not env_vars['YA_ACCESS_KEY'] or not env_vars['YA_SECRET_KEY'] or not env_vars['BUCKET_NAME']:
        print("\n‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Yandex S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("–ë–µ–∑ –Ω–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("\nüîó –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ Yandex S3:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ Yandex Cloud Console")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Object Storage")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ bucket –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π")
        print("4. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞")
        print("\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏:")
        
        ya_access_key = input("YA_ACCESS_KEY: ").strip()
        ya_secret_key = input("YA_SECRET_KEY: ").strip()
        bucket_name = input("BUCKET_NAME: ").strip()
        
        if ya_access_key and ya_secret_key and bucket_name:
            os.environ['YA_ACCESS_KEY'] = ya_access_key
            os.environ['YA_SECRET_KEY'] = ya_secret_key
            os.environ['BUCKET_NAME'] = bucket_name
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Yandex S3 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        else:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Yandex S3 –Ω–µ –≤–≤–µ–¥–µ–Ω—ã")
            return False
    
    return True


def test_connections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
    print("="*50)
    
    # –¢–µ—Å—Ç Supabase
    try:
        from supabase import create_client
        supabase_url = os.environ.get('SUPABASE_URL')
        supabase_key = os.environ.get('SUPABASE_KEY')
        
        if supabase_url and supabase_key:
            supabase = create_client(supabase_url, supabase_key)
            result = supabase.table('tinkoff_operations').select('*').limit(1).execute()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: OK")
        else:
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: –ù–ï –ù–ê–°–¢–†–û–ï–ù–û")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
    
    # –¢–µ—Å—Ç Yandex S3
    try:
        import boto3
        from botocore.config import Config
        
        ya_access_key = os.environ.get('YA_ACCESS_KEY')
        ya_secret_key = os.environ.get('YA_SECRET_KEY')
        bucket_name = os.environ.get('BUCKET_NAME')
        
        if ya_access_key and ya_secret_key and bucket_name:
            s3_client = boto3.client(
                service_name="s3",
                aws_access_key_id=ya_access_key,
                aws_secret_access_key=ya_secret_key,
                endpoint_url="https://storage.yandexcloud.net",
                region_name="ru-central1",
                config=Config(signature_version="s3v4"),
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
            response = s3_client.list_objects_v2(Bucket=bucket_name, MaxKeys=1)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex S3: OK")
        else:
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex S3: –ù–ï –ù–ê–°–¢–†–û–ï–ù–û")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex S3: {e}")


def run_synchronization():
    """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("\nüöÄ –ó–ê–ü–£–°–ö –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("="*50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        result = subprocess.run([sys.executable, 's3_to_supabase.py'], 
                              capture_output=True, text=True, encoding='utf-8')
        
        print("üì§ –í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∏:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø S3 ‚Üí SUPABASE")
    print("="*60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not setup_environment():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    test_connections()
    
    # –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    choice = input("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é? (y/n): ").lower()
    if choice in ['y', 'yes', '–¥–∞', '–¥']:
        run_synchronization()
    else:
        print("‚èπÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    print("\n" + "="*60)
    print("üéØ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase SQL Editor")


if __name__ == "__main__":
    main()
