#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub
"""

import subprocess
import sys
import os


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


def setup_git():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git"""
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê GIT")
    print("="*50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Git:")
    name = input("–í–∞—à–µ –∏–º—è: ").strip()
    email = input("–í–∞—à email: ").strip()
    
    if not name or not email:
        print("‚ùå –ò–º—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Git
    commands = [
        (f'git config user.name "{name}"', "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        (f'git config user.email "{email}"', "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            return False
    
    return True


def create_github_repo():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub"""
    print("\nüåê –°–û–ó–î–ê–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –ù–ê GITHUB")
    print("="*50)
    
    repo_name = input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: tinkoff-supabase-sync): ").strip()
    if not repo_name:
        repo_name = "tinkoff-supabase-sync"
    
    description = input("–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()
    
    print(f"\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:")
    print("="*50)
    print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://github.com")
    print("2. –ù–∞–∂–º–∏—Ç–µ 'New repository'")
    print(f"3. –ù–∞–∑–≤–∞–Ω–∏–µ: {repo_name}")
    if description:
        print(f"4. –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    print("5. –í—ã–±–µ—Ä–∏—Ç–µ 'Public' –∏–ª–∏ 'Private'")
    print("6. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ README, .gitignore –∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é")
    print("7. –ù–∞–∂–º–∏—Ç–µ 'Create repository'")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–¥–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    
    return repo_name


def push_to_github(repo_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub"""
    print(f"\nüöÄ –ó–ê–ì–†–£–ó–ö–ê –í GITHUB")
    print("="*50)
    
    github_username = input("–í–∞—à GitHub username: ").strip()
    if not github_username:
        print("‚ùå GitHub username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        return False
    
    commands = [
        ("git add .", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"),
        ('git commit -m "üéâ Initial commit: Tinkoff Invest ‚Üí Supabase sync"', "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"),
        (f"git branch -M main", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –≤ main"),
        (f"git remote add origin https://github.com/{github_username}/{repo_name}.git", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"),
        ("git push -u origin main", "–ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub"),
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            return False
    
    print(f"\nüéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω: https://github.com/{github_username}/{repo_name}")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –ù–ê GITHUB")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not os.path.exists('.git'):
        print("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'git init' —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Git
    if not setup_git():
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub
    repo_name = create_github_repo()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ GitHub
    if not push_to_github(repo_name):
        return
    
    print("\n" + "="*60)
    print("üéâ –ì–û–¢–û–í–û!")
    print("="*60)
    print("‚úÖ Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω –Ω–∞ GitHub")
    print("‚úÖ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û–±–Ω–æ–≤–∏—Ç–µ README.md —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("2. –î–æ–±–∞–≤—å—Ç–µ Issues –∏ Wiki –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Actions –¥–ª—è CI/CD")
    print("4. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–æ–∞–≤—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")


if __name__ == "__main__":
    main()
