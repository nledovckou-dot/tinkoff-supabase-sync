#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –¢–∏–Ω—å–∫–æ—Ñ—Ñ ‚Üí Supabase (–±–µ–∑ S3)
–ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –≤ Supabase
"""

import os
import logging
from datetime import datetime
from typing import List, Dict

from tinkoff.invest import Client
from supabase import create_client, Client


def get_env_variable(name: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    value = os.environ.get(name)
    if not value:
        raise RuntimeError(f"Required environment variable is missing: {name}")
    return value


class TinkoffToSupabase:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –¢–∏–Ω—å–∫–æ—Ñ—Ñ ‚Üí Supabase"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        # –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        self.invest_token = get_env_variable("INVEST_TOKEN")
        
        # Supabase
        self.supabase_url = get_env_variable("SUPABASE_URL")
        self.supabase_key = get_env_variable("SUPABASE_KEY")
        self.supabase: Client = create_client(self.supabase_url, self.supabase_key)
        
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –∏ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def —Å–æ–∑–¥–∞—Ç—å_—Ç–∞–±–ª–∏—Ü—É_supabase(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase"""
        try:
            sql = """
            CREATE TABLE IF NOT EXISTS tinkoff_operations (
                id SERIAL PRIMARY KEY,
                operation_id VARCHAR(100) UNIQUE NOT NULL,
                date_msk TIMESTAMP NOT NULL,
                action VARCHAR(200) NOT NULL,
                amount DECIMAL(15,2) NOT NULL,
                currency VARCHAR(10) NOT NULL,
                status VARCHAR(50) NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            );
            """
            
            self.supabase.rpc('exec_sql', {'sql': sql}).execute()
            logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ tinkoff_operations —Å–æ–∑–¥–∞–Ω–∞ –≤ Supabase")
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def –ø–æ–ª—É—á–∏—Ç—å_–æ–ø–µ—Ä–∞—Ü–∏–∏_—Ç–∏–Ω—å–∫–æ—Ñ—Ñ(self, days_back: int = 1000) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
        try:
            from zoneinfo import ZoneInfo
            from decimal import Decimal, ROUND_HALF_UP
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ invest.py
            from invest import build_date_range, _money_to_decimal_str, _rus_operation_type, _rus_operation_state
            
            start_date, end_date = build_date_range(days_back)
            logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ —Å %s –ø–æ %s", start_date, end_date)

            with Client(self.invest_token) as client:
                accounts = client.users.get_accounts().accounts
                if not accounts:
                    raise RuntimeError("No Tinkoff Invest accounts available for the token")

                account_id = accounts[0].id
                operations = client.operations.get_operations(
                    account_id=account_id,
                    from_=start_date,
                    to=end_date,
                )

                –æ–ø–µ—Ä–∞—Ü–∏–∏ = []
                msk = ZoneInfo("Europe/Moscow")
                
                for op in operations.operations:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –æ–ø–µ—Ä–∞—Ü–∏–∏
                    op_id = (
                        getattr(op, "id", None)
                        or getattr(op, "operation_id", None)
                        or getattr(op, "trade_id", None)
                    )
                    if not op_id:
                        fingerprint = (
                            f"{getattr(op, 'date', '')}|{getattr(op, 'type', '')}|"
                            f"{getattr(op, 'currency', '')}|{getattr(op, 'payment', '')}|"
                            f"{getattr(op, 'status', '')}|{getattr(op, 'description', '')}"
                        )
                        op_id = str(abs(hash(fingerprint)))

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
                    raw_dt = getattr(op, "date", None)
                    if isinstance(raw_dt, datetime):
                        try:
                            local_dt = raw_dt.astimezone(msk)
                        except Exception:
                            local_dt = raw_dt
                        date_str = local_dt.strftime("%Y-%m-%d %H:%M:%S")
                    else:
                        date_str = str(raw_dt)

                    amount_str = _money_to_decimal_str(getattr(op, "payment", None))
                    action_ru = _rus_operation_type(getattr(op, "type", ""))
                    status_ru = _rus_operation_state(getattr(op, "status", ""))

                    –æ–ø–µ—Ä–∞—Ü–∏–∏.append({
                        "operation_id": str(op_id),
                        "date_msk": date_str,
                        "action": action_ru,
                        "amount": float(amount_str),
                        "currency": str(getattr(op, "currency", "")),
                        "status": status_ru,
                        "description": str(getattr(op, "description", ""))
                    })

                logging.info("–ü–æ–ª—É—á–µ–Ω–æ %d –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", len(–æ–ø–µ—Ä–∞—Ü–∏–∏))
                return –æ–ø–µ—Ä–∞—Ü–∏–∏
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
            return []
    
    def –∑–∞–≥—Ä—É–∑–∏—Ç—å_–≤_supabase(self, –æ–ø–µ—Ä–∞—Ü–∏–∏: List[Dict]) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase"""
        try:
            if not –æ–ø–µ—Ä–∞—Ü–∏–∏:
                logging.warning("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                return 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase (upsert - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
            result = self.supabase.table('tinkoff_operations').upsert(
                –æ–ø–µ—Ä–∞—Ü–∏–∏, 
                on_conflict='operation_id'
            ).execute()
            
            –∑–∞–≥—Ä—É–∂–µ–Ω–æ = len(result.data)
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {–∑–∞–≥—Ä—É–∂–µ–Ω–æ} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase")
            
            return –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
            return 0
    
    def –ø–æ–ª—É—á–∏—Ç—å_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Supabase"""
        try:
            result = self.supabase.table('tinkoff_operations').select('*', count='exact').execute()
            total = result.count if result.count else 0
            
            last_op = self.supabase.table('tinkoff_operations').select('date_msk').order('date_msk', desc=True).limit(1).execute()
            last_update = last_op.data[0]['date_msk'] if last_op.data else ''
            
            return {
                'total': total,
                'last_update': last_update
            }
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total': 0, 'last_update': ''}
    
    def —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¢–∏–Ω—å–∫–æ—Ñ—Ñ ‚Üí Supabase")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.—Å–æ–∑–¥–∞—Ç—å_—Ç–∞–±–ª–∏—Ü—É_supabase()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
            –æ–ø–µ—Ä–∞—Ü–∏–∏ = self.–ø–æ–ª—É—á–∏—Ç—å_–æ–ø–µ—Ä–∞—Ü–∏–∏_—Ç–∏–Ω—å–∫–æ—Ñ—Ñ()
            
            if not –æ–ø–µ—Ä–∞—Ü–∏–∏:
                return {'status': 'error', 'message': '–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ'}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
            –∑–∞–≥—Ä—É–∂–µ–Ω–æ = self.–∑–∞–≥—Ä—É–∑–∏—Ç—å_–≤_supabase(–æ–ø–µ—Ä–∞—Ü–∏–∏)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.–ø–æ–ª—É—á–∏—Ç—å_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É()
            
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = {
                'status': 'success',
                'total_operations': len(–æ–ø–µ—Ä–∞—Ü–∏–∏),
                'loaded_operations': –∑–∞–≥—Ä—É–∂–µ–Ω–æ,
                'total_in_supabase': stats.get('total', 0),
                'last_update': stats.get('last_update', ''),
                'sync_time': datetime.now().isoformat()
            }
            
            logging.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {'status': 'error', 'message': str(e)}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(
        level=logging.INFO, 
        format="%(asctime)s %(levelname)s %(message)s",
        handlers=[
            logging.FileHandler('tinkoff_to_supabase.log'),
            logging.StreamHandler()
        ]
    )
    
    try:
        print("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¢–ò–ù–¨–ö–û–§–§ ‚Üí SUPABASE")
        print("="*50)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
        —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä = TinkoffToSupabase()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä.—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('status')}")
        print(f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('total_operations', 0)}")
        print(f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Supabase: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('loaded_operations', 0)}")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –≤ Supabase: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('total_in_supabase', 0)}")
        print(f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('last_update', 'N/A')}")
        
        if —Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('status') == 'success':
            print("\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase SQL Editor")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('message')}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
