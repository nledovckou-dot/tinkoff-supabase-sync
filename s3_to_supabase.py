#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Yandex S3 –≤ Supabase
–ü–æ–ª—É—á–∞–µ—Ç CSV —Ñ–∞–π–ª—ã –∏–∑ S3 –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ Supabase
"""

import os
import csv
import json
import logging
import tempfile
from datetime import datetime
from typing import List, Dict, Optional

import boto3
from botocore.config import Config
from supabase import create_client, Client


def get_env_variable(name: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    value = os.environ.get(name)
    if not value:
        raise RuntimeError(f"Required environment variable is missing: {name}")
    return value


def get_optional_env_variable(name: str, default: str = "") -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return os.environ.get(name, default)


class S3ToSupabase:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3 –≤ Supabase"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        # Yandex S3
        self.ya_access_key = get_env_variable("YA_ACCESS_KEY")
        self.ya_secret_key = get_env_variable("YA_SECRET_KEY")
        self.bucket_name = get_env_variable("BUCKET_NAME")
        
        # Supabase
        self.supabase_url = get_env_variable("SUPABASE_URL")
        self.supabase_key = get_env_variable("SUPABASE_KEY")
        self.supabase: Client = create_client(self.supabase_url, self.supabase_key)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ S3 –∫–ª–∏–µ–Ω—Ç–∞
        self.s3_client = boto3.client(
            service_name="s3",
            aws_access_key_id=self.ya_access_key,
            aws_secret_access_key=self.ya_secret_key,
            endpoint_url="https://storage.yandexcloud.net",
            region_name="ru-central1",
            config=Config(signature_version="s3v4"),
        )
        
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3 –∏ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def —Å–æ–∑–¥–∞—Ç—å_—Ç–∞–±–ª–∏—Ü—É_supabase(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
        try:
            sql = """
            CREATE TABLE IF NOT EXISTS tinkoff_operations (
                id SERIAL PRIMARY KEY,
                operation_id VARCHAR(100) UNIQUE NOT NULL,
                date_msk TIMESTAMP NOT NULL,
                action VARCHAR(200) NOT NULL,
                amount DECIMAL(15,2) NOT NULL,
                currency VARCHAR(10) NOT NULL,
                status VARCHAR(50) NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            );
            """
            
            self.supabase.rpc('exec_sql', {'sql': sql}).execute()
            logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ tinkoff_operations —Å–æ–∑–¥–∞–Ω–∞ –≤ Supabase")
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def –ø–æ–ª—É—á–∏—Ç—å_—Å–ø–∏—Å–æ–∫_—Ñ–∞–π–ª–æ–≤_s3(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ CSV —Ñ–∞–π–ª–æ–≤ –∏–∑ S3"""
        try:
            response = self.s3_client.list_objects_v2(Bucket=self.bucket_name)
            
            csv_files = []
            if 'Contents' in response:
                for obj in response['Contents']:
                    key = obj['Key']
                    if key.endswith('.csv') and 'operations' in key:
                        csv_files.append(key)
            
            logging.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(csv_files)} CSV —Ñ–∞–π–ª–æ–≤ –≤ S3")
            return csv_files
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ S3: {e}")
            return []
    
    def —Å–∫–∞—á–∞—Ç—å_—Ñ–∞–π–ª_–∏–∑_s3(self, key: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ S3 –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        try:
            temp_file = os.path.join(tempfile.gettempdir(), f"temp_{key}")
            
            self.s3_client.download_file(self.bucket_name, key, temp_file)
            logging.info(f"üì• –§–∞–π–ª {key} —Å–∫–∞—á–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            
            return temp_file
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {key}: {e}")
            return None
    
    def –∑–∞–≥—Ä—É–∑–∏—Ç—å_csv_–≤_supabase(self, file_path: str) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ Supabase"""
        try:
            –æ–ø–µ—Ä–∞—Ü–∏–∏ = []
            
            with open(file_path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Supabase
                    –æ–ø–µ—Ä–∞—Ü–∏—è = {
                        'operation_id': row['operation_id'],
                        'date_msk': row['date_msk'],
                        'action': row['action'],
                        'amount': float(row['amount']),
                        'currency': row['currency'],
                        'status': row['status'],
                        'description': row['description']
                    }
                    –æ–ø–µ—Ä–∞—Ü–∏–∏.append(–æ–ø–µ—Ä–∞—Ü–∏—è)
            
            if not –æ–ø–µ—Ä–∞—Ü–∏–∏:
                logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                return 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase (upsert - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
            result = self.supabase.table('tinkoff_operations').upsert(
                –æ–ø–µ—Ä–∞—Ü–∏–∏, 
                on_conflict='operation_id'
            ).execute()
            
            –∑–∞–≥—Ä—É–∂–µ–Ω–æ = len(result.data)
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {–∑–∞–≥—Ä—É–∂–µ–Ω–æ} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase")
            
            return –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV –≤ Supabase: {e}")
            return 0
    
    def –ø–æ–ª—É—á–∏—Ç—å_–ø–æ—Å–ª–µ–¥–Ω–∏–π_—Ñ–∞–π–ª(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ S3"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å latest.json
            try:
                latest_info = self.s3_client.get_object(Bucket=self.bucket_name, Key="latest.json")
                latest_data = json.loads(latest_info['Body'].read().decode('utf-8'))
                latest_file = latest_data.get('key')
                
                if latest_file:
                    logging.info(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∏–∑ latest.json: {latest_file}")
                    return latest_file
                    
            except Exception:
                logging.info("üìÑ latest.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π CSV —Ñ–∞–π–ª")
            
            # –ï—Å–ª–∏ latest.json –Ω–µ—Ç, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π CSV —Ñ–∞–π–ª
            csv_files = self.–ø–æ–ª—É—á–∏—Ç—å_—Å–ø–∏—Å–æ–∫_—Ñ–∞–π–ª–æ–≤_s3()
            if csv_files:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª)
                csv_files.sort(reverse=True)
                latest_file = csv_files[0]
                logging.info(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π CSV —Ñ–∞–π–ª: {latest_file}")
                return latest_file
            
            return None
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–¥–∞–Ω–Ω—ã–µ(self) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3 –≤ Supabase"""
        try:
            logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö S3 ‚Üí Supabase")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Supabase
            self.—Å–æ–∑–¥–∞—Ç—å_—Ç–∞–±–ª–∏—Ü—É_supabase()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
            latest_file = self.–ø–æ–ª—É—á–∏—Ç—å_–ø–æ—Å–ª–µ–¥–Ω–∏–π_—Ñ–∞–π–ª()
            
            if not latest_file:
                logging.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return {'status': 'error', 'message': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            temp_file = self.—Å–∫–∞—á–∞—Ç—å_—Ñ–∞–π–ª_–∏–∑_s3(latest_file)
            
            if not temp_file:
                return {'status': 'error', 'message': '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞'}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
            –∑–∞–≥—Ä—É–∂–µ–Ω–æ = self.–∑–∞–≥—Ä—É–∑–∏—Ç—å_csv_–≤_supabase(temp_file)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_file)
            except Exception:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Supabase
            stats = self.–ø–æ–ª—É—á–∏—Ç—å_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É_supabase()
            
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = {
                'status': 'success',
                'file': latest_file,
                'loaded_operations': –∑–∞–≥—Ä—É–∂–µ–Ω–æ,
                'total_operations': stats.get('total', 0),
                'last_update': stats.get('last_update', ''),
                'sync_time': datetime.now().isoformat()
            }
            
            logging.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {'status': 'error', 'message': str(e)}
    
    def –ø–æ–ª—É—á–∏—Ç—å_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É_supabase(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Supabase"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
            result = self.supabase.table('tinkoff_operations').select('*', count='exact').execute()
            total = result.count if result.count else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é
            last_op = self.supabase.table('tinkoff_operations').select('date_msk').order('date_msk', desc=True).limit(1).execute()
            last_update = last_op.data[0]['date_msk'] if last_op.data else ''
            
            return {
                'total': total,
                'last_update': last_update
            }
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total': 0, 'last_update': ''}
    
    def —Å–æ–∑–¥–∞—Ç—å_–æ—Ç—á–µ—Ç(self, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        –æ—Ç—á–µ—Ç = f"""
{'='*60}
–û–¢–ß–ï–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò S3 ‚Üí SUPABASE
{'='*60}
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
–°—Ç–∞—Ç—É—Å: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('status', 'unknown')}

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚Ä¢ –§–∞–π–ª: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('file', 'N/A')}
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('loaded_operations', 0)}
‚Ä¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('total_operations', 0)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('last_update', 'N/A')}
‚Ä¢ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('sync_time', 'N/A')}

{'='*60}
"""
        
        if —Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('status') == 'success':
            –æ—Ç—á–µ—Ç += "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        else:
            –æ—Ç—á–µ—Ç += f"‚ùå –û—à–∏–±–∫–∞: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('message', 'Unknown error')}\n"
        
        –æ—Ç—á–µ—Ç += "="*60
        
        return –æ—Ç—á–µ—Ç


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(
        level=logging.INFO, 
        format="%(asctime)s %(levelname)s %(message)s",
        handlers=[
            logging.FileHandler('s3_to_supabase.log'),
            logging.StreamHandler()
        ]
    )
    
    try:
        print("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø S3 ‚Üí SUPABASE")
        print("="*50)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
        —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä = S3ToSupabase()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä.—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–¥–∞–Ω–Ω—ã–µ()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        –æ—Ç—á–µ—Ç = —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä.—Å–æ–∑–¥–∞—Ç—å_–æ—Ç—á–µ—Ç(—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('–æ—Ç—á–µ—Ç_—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.txt', 'w', encoding='utf-8') as f:
            f.write(–æ—Ç—á–µ—Ç)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(–æ—Ç—á–µ—Ç)
        
        if —Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('status') == 'success':
            print("\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª '–æ—Ç—á–µ—Ç_—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.txt'")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç.get('message')}")
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
